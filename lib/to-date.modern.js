const e=e=>e instanceof Date&&!isNaN(e.getTime());var t;!function(e){e[e.BESTGUESS=0]="BESTGUESS",e[e.SECONDS=1]="SECONDS",e[e.MILLISCONDS=2]="MILLISCONDS",e[e.MICROSECONDS=3]="MICROSECONDS"}(t||(t={}));const n=(n,r=t.BESTGUESS)=>{if(e(n))return new Date(n.getTime());if("string"==typeof n){const t=new Date(n);return e(t)?t:void 0}if("number"==typeof n){let e;switch(r){case t.BESTGUESS:e=Math.log10(n)>=13?n/1e3:Math.log10(n)>=10?n:1e3*n;break;case t.SECONDS:e=1e3*n;break;case t.MILLISCONDS:e=n;break;case t.MICROSECONDS:e=n/1e3}return new Date(e)}return null},r=t=>{const r=n(t);return e(r)?"string"==typeof(o=t)&&/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}$/.test(o)?n(Date.UTC(r.getFullYear(),r.getMonth(),r.getDate(),r.getHours(),r.getMinutes(),r.getSeconds())):r:null;var o},o=(t,n)=>{const o=r(t);if(e(o)){const e=((e,t)=>{var n;const r=new Intl.DateTimeFormat("en-US",{timeZone:t,timeZoneName:"shortOffset"}).formatToParts(e),o=null==r||null==(n=r.find(e=>"timeZoneName"===e.type))?void 0:n.value;if("GMT"===o)return 0;{const e=null==o?void 0:o.match(/GMT([+-]\d+)/);if(e)return 60*parseInt(e[1],10);throw new Error(`Unable to determine offset for time zone: ${t}`)}})(o,n);return o.setMinutes(o.getMinutes()-e),o}return null};export{t as EpochUnit,e as isDate,n as toDate,o as toDateInTimeZone,r as toDateUTC};
//# sourceMappingURL=to-date.modern.js.map
